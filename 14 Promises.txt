we know setTimeout()		//async function in JS

What are promises


Promise object has 3 states


a) fulfilled:

b) Rejected

c) Pending


a) CREATE A PROMISE

a.1) How to create new promise in JS
			//promise() constructor		//takes input: function
const promise = new Promise((resolve, reject) => {
	if(getRandomBool()) {
		resolve("resolved!")				//called when finished operations successfully //promise fulfilled
	} else {
		reject("rejected!")				//something went wrong with operationa
	}
	}, 1000)
})


1.1) waits for 1000ms
1.2) 50% chance promise will resolve  //String: resolved
1.3) 50% chance pomise will reject     //String: rejected


a.2)  How to use promise


A promise has 2 Callback functions  // that we can attach

1.1).then()		//This runs after promise is completed successfully / fulfilled //resolve()

promise.then((message) => {
	console.log('The promise finally ${message}')
}).catch((message) => {
	console.log('The promise finally ${message}')
})

1.2).catch()		//This runs if a promise is rejects / fulfilled //reject("rejected!")	

.catch((message) => {
	console.log('The promise finally ${message}')
})





>Output:
// prints: I

// The promise finally resolved!
// or

// the promise finally rejected!
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Complete assignment
a) Objective: apply runApplyDamageTest()  	

b) What parameters it takes as inputs?
//runApplyDamageTest()  takes in 2 parameters: damage, currentHP
What function returns? returns promise after 1 second

c) if damage reduces playerHP to 0 --> promise rejected with
The player suffers ${damage} points of damage and has fallen
unconscious.

  else : promise will resolve

The player suffers ${damage} points of damage and has ${newHP}
hit points remaining.



The player suffers ${damage} points of damage and has ${newHP}
hit points remaining.




1) Create promise

const applyDamage = (damage, currentHP) => {
return new Promise((resolve, reject) => {
setTimeout(() => {
//Added this part
	
const newHP = currentHP - damage
if(newHP<= 0) {
	//reject the promise
	reject('The player suffers ${damage} points of damage and has fallen unconsciously')
} else {
	resolve('The player suffers ${damage} points of damage and has ${newHP} hit points remaining.')
}
}, 1000)
})
}



}. 1000)
})I
}

//Dont touch below this code:

function runApplyDamageTest(damage, currentHP) {
console.log(‘Applying ${damage} damage to player with ${current
applyDamage(damage, currentHP).then((message) => {
	console.log(‘ . . .applyDamage resolved with: ${message}‘)
}).catch((message) => {
	console.log(‘...applyDamage rejected with: ${message}‘)
})
}





OUTPUT:
		
Applying 27 damage to player with 50 HP...

...applyDamage resolved with: The player suffers 27 points
of damage and has 23 hit points remaining.

Applying 50 damage to player with 50 HP...

...applyDamage rejected with: The player suffers 50 points
of damage and has fallen unconscious.

Applying 110 damage to player with 100 HP...
...applyDamage rejected with: The player suffers 110
points of damage and has fallen unconscious.



What observation:

uses full second to apply damage
//before reducing other player's damage, player has window to escape
//Asyncchronous programming useful there
++++++++++++++++++++++++++++++++++++++++++++++++++++

Why we need promises


a) there are "a" way to write asynchronous code  // not only
	
	//where used? fetch() returns a promise

b) Front end dev : network request is made

	if want to interact with remote server
	reading a file from hard disk (rest of program doesnt wait while we grab data from hard drive)
	Interacting with bluetooth devices


//Whenever hav eto interact with real world : asynchronous will be needed



	