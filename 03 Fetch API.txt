a) What we need to know for making http request

	URL
	Body
	Headers
	etc..



b) Shortcut: built in function fetch()
//Below code generates error: response.json is not a function
b.1) Objective: find why error


b.2) Reason: this.json() called on garbage object
	Why object is garbage? await keyword was not added to fetch(url,settings) request.


b.3) After adding can get items from server and log them successfully


const response = await fetch(url, settings)	//await keyword: asynchronous programming 	//response = response object
const responseData = await response.json()	//converts response data from server ---> json object
							//what form is data in initially when we get form server? depends on what type of request
							ex  if request to API --> JSON / XML	(Used for data exchange bw systems)
							//What response data contains?
								status codes, error messages,data records
			//this.json() called
c) What server responds? JSON data

What JSON data looks like? brackets,colons //key-value pairs
				//basically looks like javascript object , is text form

const apiKey = generateKey()	
const url = getURL()						//what url we making request to
const settings = getSettings()				//what request specific settings
const response = fetch(url, settings)			//What data comes back from server
const responseData = await response.json()		//await tells JS : wait until request comes back, before continuing
logItems(responseData) I					

//We are interested in above part


+++++++++++++++++++++++++++++++++++++++++++++++++

function getSettings() {
return {
    method: 'GET',
    mode:1'cors',
    headers: {
    'X-API—Key': apiKey,
    'Content—Type': 'application/json' 
  }
 }
}


function getURL() {		
	return 'https://...';

}

function generateKey() {					//Authentication
	const characters = 'ABCDEF0123456789'
	let result = ''
	for (let i = 0; i < 16; i++){
		result += characters.charAt(Math.floor(Math.random() * charac
	}
	return result
}

function logItems(items) {		//Logging
	for(item of items) {
		console.log(item.name)
	}
}